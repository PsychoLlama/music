// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  var add, fireSongEvent, makeAudio, root;

  root = this;

  makeAudio = function(title, src, img) {
    var aud;
    aud = document.createElement('audio');
    if (title) {
      aud.setAttribute('data-title', title);
    }
    if (src) {
      aud.setAttribute('src', src);
    }
    if (img) {
      aud.setAttribute('data-img', img);
    }
    return aud;
  };

  add = function(playlist, destination) {
    var audio, song, _i, _len;
    if (playlist.length === 0) {
      return void 0;
    }
    for (_i = 0, _len = playlist.length; _i < _len; _i++) {
      song = playlist[_i];
      audio = makeAudio(song.title, song.src, song.img);
      destination.push(audio);
    }
    return destination;
  };

  fireSongEvent = function(playlist) {
    try {
      return playlist.songChange.forEach(function(callback) {
        return callback(playlist.getSong());
      });
    } catch (_error) {}
  };

  root.Song = function(playlist) {
    this.repeat = false;
    this.playlist = [];
    add(playlist, this.playlist);
    this.songNumber = 0;
    this.songChange = [];
    return this;
  };

  root.Song.prototype.history = [];

  root.Song.prototype.updateHistory = function(song) {
    var history, last;
    history = root.Song.prototype.history;
    last = history.length - 1;
    if (song === history[last]) {
      return void 0;
    } else {
      return history.push(song);
    }
  };

  root.Song.prototype.shuffle = function() {
    this.songNumber = 0;
    this.playlist.sort(function() {
      return (Math.floor(Math.random() * 3)) - 1;
    });
    this.resetSongs();
    fireSongEvent(this);
    return this.playlist;
  };

  root.Song.prototype.next = function() {
    var isLastSong, lastSong, repeat;
    lastSong = this.playlist.length - 1;
    isLastSong = this.songNumber === lastSong;
    repeat = this.repeat;
    if (isLastSong && repeat) {
      return this.skipTo(0);
    } else if (isLastSong && !repeat) {
      return void 0;
    } else if (this.songNumber < lastSong) {
      return this.skipTo(this.songNumber + 1);
    }
  };

  root.Song.prototype.previous = function() {
    var audio;
    audio = this.getSong();
    if (audio.currentTime < 5 && audio.currentTime > 0) {
      this.resetSongs();
      return audio;
    } else if (this.songNumber === 0) {
      return this.skipTo(this.playlist.length - 1);
    } else if (this.songNumber > 0) {
      return this.skipTo(this.songNumber - 1);
    }
  };

  root.Song.prototype.skipTo = function(songNum) {
    if (songNum >= this.playlist.length) {
      return void 0;
    }
    if (songNum < 0) {
      return void 0;
    }
    if (songNum || songNum === 0) {
      this.resetSongs;
      this.songNumber = songNum;
      this.updateHistory(this.getSong());
      fireSongEvent(this);
      return this.getSong();
    }
  };

  root.Song.prototype.resetSongs = function() {
    var song, _i, _len, _ref, _results;
    _ref = this.playlist;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      song = _ref[_i];
      try {
        song.pause();
        _results.push(song.currentTime = 0);
      } catch (_error) {}
    }
    return _results;
  };

  root.Song.prototype.getSong = function() {
    return this.playlist[this.songNumber];
  };

  root.Song.prototype.getAlbum = function(audio) {
    var img, src;
    if (!audio) {
      audio = this.getSong();
    }
    src = audio.getAttribute('data-img');
    img = document.createElement('img');
    img.src = src;
    return img;
  };

  root.Song.prototype.getTitle = function(audio) {
    var title;
    if (!audio) {
      audio = this.getSong();
    }
    try {
      title = audio.getAttribute('data-title');
    } catch (_error) {
      title = '';
    }
    return title;
  };

}).call(this);
